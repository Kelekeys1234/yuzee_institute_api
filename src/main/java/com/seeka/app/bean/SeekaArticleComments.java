package com.seeka.app.bean;

import static javax.persistence.GenerationType.IDENTITY;

import java.io.Serializable;
import java.math.BigInteger;

// Generated 7 Jun, 2019 2:45:49 PM by Hibernate Tools 4.3.1

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * SeekaArticleComments generated by hbm2java
 */
@Entity
@Table(name = "seeka_article_comments")
public class SeekaArticleComments implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 2315258617119601665L;
	private BigInteger id;
	private SeekaArticles seekaArticles;
	private UserInfo userInfo;
	private String comment;
	private Date dated;
	private Boolean status;

	public SeekaArticleComments() {
	}

	public SeekaArticleComments(SeekaArticles seekaArticles, UserInfo userInfo, String comment, Date dated,
			Boolean status) {
		this.seekaArticles = seekaArticles;
		this.userInfo = userInfo;
		this.comment = comment;
		this.dated = dated;
		this.status = status;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public BigInteger getId() {
		return this.id;
	}

	public void setId(BigInteger id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "article_id")
	public SeekaArticles getSeekaArticles() {
		return this.seekaArticles;
	}

	public void setSeekaArticles(SeekaArticles seekaArticles) {
		this.seekaArticles = seekaArticles;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "user_id")
	public UserInfo getUserInfo() {
		return this.userInfo;
	}

	public void setUserInfo(UserInfo userInfo) {
		this.userInfo = userInfo;
	}

	@Column(name = "comment", length = 1)
	public String getComment() {
		return this.comment;
	}

	public void setComment(String comment) {
		this.comment = comment;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "dated", length = 19)
	public Date getDated() {
		return this.dated;
	}

	public void setDated(Date dated) {
		this.dated = dated;
	}

	@Column(name = "status")
	public Boolean getStatus() {
		return this.status;
	}

	public void setStatus(Boolean status) {
		this.status = status;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((comment == null) ? 0 : comment.hashCode());
		result = prime * result + ((dated == null) ? 0 : dated.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((seekaArticles == null) ? 0 : seekaArticles.hashCode());
		result = prime * result + ((status == null) ? 0 : status.hashCode());
		result = prime * result + ((userInfo == null) ? 0 : userInfo.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		SeekaArticleComments other = (SeekaArticleComments) obj;
		if (comment == null) {
			if (other.comment != null)
				return false;
		} else if (!comment.equals(other.comment))
			return false;
		if (dated == null) {
			if (other.dated != null)
				return false;
		} else if (!dated.equals(other.dated))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (seekaArticles == null) {
			if (other.seekaArticles != null)
				return false;
		} else if (!seekaArticles.equals(other.seekaArticles))
			return false;
		if (status == null) {
			if (other.status != null)
				return false;
		} else if (!status.equals(other.status))
			return false;
		if (userInfo == null) {
			if (other.userInfo != null)
				return false;
		} else if (!userInfo.equals(other.userInfo))
			return false;
		return true;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("SeekaArticleComments [id=").append(id).append(", seekaArticles=").append(seekaArticles)
				.append(", userInfo=").append(userInfo).append(", comment=").append(comment).append(", dated=")
				.append(dated).append(", status=").append(status).append("]");
		return builder.toString();
	}

}
