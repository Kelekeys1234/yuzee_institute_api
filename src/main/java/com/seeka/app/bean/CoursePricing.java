package com.seeka.app.bean;

import static javax.persistence.GenerationType.IDENTITY;

import java.io.Serializable;

// Generated 7 Jun, 2019 2:45:49 PM by Hibernate Tools 4.3.1

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * CoursePricing generated by hbm2java
 */
public class CoursePricing implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 8311274851710389762L;
	private String id;
	private Course course;
	private Double localFees;
	private Double intlFees;
	private Double unionFees;
	private String currency;
	private String currencyTime;
	private Double costSavings;
	private Double costRange;
	private Boolean isActive;
	private Date createdOn;
	private Date updatedOn;
	private Date deletedOn;
	private String createdBy;
	private String updatedBy;
	private Boolean isDeleted;

	public CoursePricing() {
	}

	public CoursePricing(Course course) {
		this.course = course;
	}

	public CoursePricing(Course course, Double localFees, Double intlFees, Double unionFees, String currency,
			String currencyTime, Double costSavings, Double costRange, Boolean isActive, Date createdOn, Date updatedOn,
			Date deletedOn, String createdBy, String updatedBy, Boolean isDeleted) {
		this.course = course;
		this.localFees = localFees;
		this.intlFees = intlFees;
		this.unionFees = unionFees;
		this.currency = currency;
		this.currencyTime = currencyTime;
		this.costSavings = costSavings;
		this.costRange = costRange;
		this.isActive = isActive;
		this.createdOn = createdOn;
		this.updatedOn = updatedOn;
		this.deletedOn = deletedOn;
		this.createdBy = createdBy;
		this.updatedBy = updatedBy;
		this.isDeleted = isDeleted;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public String getId() {
		return this.id;
	}

	public void setId(String id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "course_id", nullable = false)
	public Course getCourse() {
		return this.course;
	}

	public void setCourse(Course course) {
		this.course = course;
	}

	@Column(name = "local_fees", precision = 18, scale = 3)
	public Double getLocalFees() {
		return this.localFees;
	}

	public void setLocalFees(Double localFees) {
		this.localFees = localFees;
	}

	@Column(name = "intl_fees", precision = 18, scale = 3)
	public Double getIntlFees() {
		return this.intlFees;
	}

	public void setIntlFees(Double intlFees) {
		this.intlFees = intlFees;
	}

	@Column(name = "union_fees", precision = 18, scale = 3)
	public Double getUnionFees() {
		return this.unionFees;
	}

	public void setUnionFees(Double unionFees) {
		this.unionFees = unionFees;
	}

	@Column(name = "currency", length = 50)
	public String getCurrency() {
		return this.currency;
	}

	public void setCurrency(String currency) {
		this.currency = currency;
	}

	@Column(name = "currency_time", length = 250)
	public String getCurrencyTime() {
		return this.currencyTime;
	}

	public void setCurrencyTime(String currencyTime) {
		this.currencyTime = currencyTime;
	}

	@Column(name = "cost_savings", precision = 18, scale = 3)
	public Double getCostSavings() {
		return this.costSavings;
	}

	public void setCostSavings(Double costSavings) {
		this.costSavings = costSavings;
	}

	@Column(name = "cost_range", precision = 18, scale = 3)
	public Double getCostRange() {
		return this.costRange;
	}

	public void setCostRange(Double costRange) {
		this.costRange = costRange;
	}

	@Column(name = "is_active")
	public Boolean getIsActive() {
		return this.isActive;
	}

	public void setIsActive(Boolean isActive) {
		this.isActive = isActive;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_on", length = 19)
	public Date getCreatedOn() {
		return this.createdOn;
	}

	public void setCreatedOn(Date createdOn) {
		this.createdOn = createdOn;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated_on", length = 19)
	public Date getUpdatedOn() {
		return this.updatedOn;
	}

	public void setUpdatedOn(Date updatedOn) {
		this.updatedOn = updatedOn;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "deleted_on", length = 19)
	public Date getDeletedOn() {
		return this.deletedOn;
	}

	public void setDeletedOn(Date deletedOn) {
		this.deletedOn = deletedOn;
	}

	@Column(name = "created_by", length = 50)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Column(name = "updated_by", length = 50)
	public String getUpdatedBy() {
		return this.updatedBy;
	}

	public void setUpdatedBy(String updatedBy) {
		this.updatedBy = updatedBy;
	}

	@Column(name = "is_deleted")
	public Boolean getIsDeleted() {
		return this.isDeleted;
	}

	public void setIsDeleted(Boolean isDeleted) {
		this.isDeleted = isDeleted;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((costRange == null) ? 0 : costRange.hashCode());
		result = prime * result + ((costSavings == null) ? 0 : costSavings.hashCode());
		result = prime * result + ((course == null) ? 0 : course.hashCode());
		result = prime * result + ((createdBy == null) ? 0 : createdBy.hashCode());
		result = prime * result + ((createdOn == null) ? 0 : createdOn.hashCode());
		result = prime * result + ((currency == null) ? 0 : currency.hashCode());
		result = prime * result + ((currencyTime == null) ? 0 : currencyTime.hashCode());
		result = prime * result + ((deletedOn == null) ? 0 : deletedOn.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((intlFees == null) ? 0 : intlFees.hashCode());
		result = prime * result + ((isActive == null) ? 0 : isActive.hashCode());
		result = prime * result + ((isDeleted == null) ? 0 : isDeleted.hashCode());
		result = prime * result + ((localFees == null) ? 0 : localFees.hashCode());
		result = prime * result + ((unionFees == null) ? 0 : unionFees.hashCode());
		result = prime * result + ((updatedBy == null) ? 0 : updatedBy.hashCode());
		result = prime * result + ((updatedOn == null) ? 0 : updatedOn.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		CoursePricing other = (CoursePricing) obj;
		if (costRange == null) {
			if (other.costRange != null)
				return false;
		} else if (!costRange.equals(other.costRange))
			return false;
		if (costSavings == null) {
			if (other.costSavings != null)
				return false;
		} else if (!costSavings.equals(other.costSavings))
			return false;
		if (course == null) {
			if (other.course != null)
				return false;
		} else if (!course.equals(other.course))
			return false;
		if (createdBy == null) {
			if (other.createdBy != null)
				return false;
		} else if (!createdBy.equals(other.createdBy))
			return false;
		if (createdOn == null) {
			if (other.createdOn != null)
				return false;
		} else if (!createdOn.equals(other.createdOn))
			return false;
		if (currency == null) {
			if (other.currency != null)
				return false;
		} else if (!currency.equals(other.currency))
			return false;
		if (currencyTime == null) {
			if (other.currencyTime != null)
				return false;
		} else if (!currencyTime.equals(other.currencyTime))
			return false;
		if (deletedOn == null) {
			if (other.deletedOn != null)
				return false;
		} else if (!deletedOn.equals(other.deletedOn))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (intlFees == null) {
			if (other.intlFees != null)
				return false;
		} else if (!intlFees.equals(other.intlFees))
			return false;
		if (isActive == null) {
			if (other.isActive != null)
				return false;
		} else if (!isActive.equals(other.isActive))
			return false;
		if (isDeleted == null) {
			if (other.isDeleted != null)
				return false;
		} else if (!isDeleted.equals(other.isDeleted))
			return false;
		if (localFees == null) {
			if (other.localFees != null)
				return false;
		} else if (!localFees.equals(other.localFees))
			return false;
		if (unionFees == null) {
			if (other.unionFees != null)
				return false;
		} else if (!unionFees.equals(other.unionFees))
			return false;
		if (updatedBy == null) {
			if (other.updatedBy != null)
				return false;
		} else if (!updatedBy.equals(other.updatedBy))
			return false;
		if (updatedOn == null) {
			if (other.updatedOn != null)
				return false;
		} else if (!updatedOn.equals(other.updatedOn))
			return false;
		return true;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("CoursePricing [id=").append(id).append(", course=").append(course).append(", localFees=")
				.append(localFees).append(", intlFees=").append(intlFees).append(", unionFees=").append(unionFees)
				.append(", currency=").append(currency).append(", currencyTime=").append(currencyTime)
				.append(", costSavings=").append(costSavings).append(", costRange=").append(costRange)
				.append(", isActive=").append(isActive).append(", createdOn=").append(createdOn).append(", updatedOn=")
				.append(updatedOn).append(", deletedOn=").append(deletedOn).append(", createdBy=").append(createdBy)
				.append(", updatedBy=").append(updatedBy).append(", isDeleted=").append(isDeleted).append("]");
		return builder.toString();
	}

}
